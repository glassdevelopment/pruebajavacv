package src.main.code;

import java.io.File;
import java.io.FilenameFilter;
import java.nio.IntBuffer;

import org.bytedeco.javacpp.opencv_contrib.FaceRecognizer;
import org.bytedeco.javacpp.opencv_core.Mat;
import org.bytedeco.javacpp.opencv_core.MatVector;

import static org.bytedeco.javacpp.opencv_contrib.*;
import static org.bytedeco.javacpp.opencv_core.*;
import static org.bytedeco.javacpp.opencv_highgui.*;




public class OpenCVFaceRecognizer {
	 public static void main(String[] args) {
		 
		 	String path = "../resources";
		 	String pathImg = "../resources2";
		 	String pathImg2 = "C:/Users/gonzalo1/javaworkspace/pruebajavacv/src/src/main/resources2";
	        String trainingDir = path;
	        Mat testImage = imread(pathImg2, CV_LOAD_IMAGE_GRAYSCALE);

	        File root = new File(trainingDir);

	        FilenameFilter imgFilter = new FilenameFilter() {
	            public boolean accept(File dir, String name) {
	                name = name.toLowerCase();
	                return name.endsWith(".jpg") || name.endsWith(".pgm") || name.endsWith(".png");
	            }
	        };

	        File[] imageFiles = root.listFiles(imgFilter);

	        MatVector images = new MatVector(imageFiles.length);

	        Mat labels = new Mat(imageFiles.length, 1, CV_32SC1);
	        IntBuffer labelsBuf = labels.getIntBuffer();

	        int counter = 0;

	        for (File image : imageFiles) {
	            Mat img = imread(image.getAbsolutePath(), CV_LOAD_IMAGE_GRAYSCALE);

	            int label = Integer.parseInt(image.getName().split("\\-")[0]);

	            images.put(counter, img);

	            labelsBuf.put(counter, label);

	            counter++;
	        }

	        FaceRecognizer faceRecognizer = createFisherFaceRecognizer();
	        // FaceRecognizer faceRecognizer = createEigenFaceRecognizer();
	        // FaceRecognizer faceRecognizer = createLBPHFaceRecognizer()

	        faceRecognizer.train(images, labels);

	        int predictedLabel = faceRecognizer.predict(testImage);

	        System.out.println("Predicted label: " + predictedLabel);
	    }
}
